==================
Uninitialized variable
==================

x: u32;

---

(source_file
  (var_declaration
    (identifier)
    (type)
  )
)

==================
Initialized variable with type
==================

x: u32 = 1;

---

(source_file
  (var_declaration
    (identifier)
    (type)
    (number)
  )
)

==================
Initialized variable without type
==================

x := 1;

---

(source_file
  (variable_declaration
    (identifier)
    (number)
  )
)

==================
Constant variable with type
==================

x: u32 : 1;

---

(source_file
  (var_declaration
    (identifier)
    (type)
    (number)
  )
)

==================
Constant variable without type
==================

x :: 1;

---

(source_file
  (const_declaration
    (identifier)
    (number)
  )
)

==================
Constant string
==================

x :: "hello";

---

(source_file
  (const_declaration
    (identifier)
    (string
      (string_content)
    )
  )
)

==================
Constant boolean
==================

is_real :: true;

---

(source_file
  (const_declaration
    (identifier)
    (boolean)
  )
)

==================
Constant float
==================

PI :: 3.1416

---

(source_file
  (const_declaration
    (identifier)
    (float)
  )
)

==================
Fixed-size array
==================

numbers: [10] int;

---

(source_file
  (var_declaration
    (identifier)
    (type
      (array_type
        (number)
        (type)
      )
    )
  )
)

==================
Dynamic array
==================

numbers: [..] int;

---

(source_file
  (var_declaration
    (identifier)
    (type
      (array_type
        (type)
      )
    )
  )
)

==================
Slice
==================

numbers: [] int;

---

(source_file
  (var_declaration
    (identifier)
    (type
      (array_type
        (type)
      )
    )
  )
)

==================
String
==================

text: string;

---

(source_file
  (var_declaration
    (identifier)
    (type)
  )
)

==================
Variable with string litteral
==================

text := "Hello";

---

(source_file
  (variable_declaration
    (identifier)
    (string
      (string_content)
    )
  )
)

==================
Assign two at once
==================

proc :: () {
  x, y: int;
  x, y = 1, 2;
}

---

(source_file
  (procedure_declaration
    (identifier)
    (procedure
      (parameters)
      (block
        (var_declaration
          (identifier)
          (identifier)
          (type)
        )
        (assignment_statement
          (identifier)
          (identifier)
          (number)
          (number)
        )
      )
    )
  )
)

==================
Variable initialized by an array litteral
==================

array := string.["Hello", "there", "my", "dude?"];

---

(source_file
  (variable_declaration
    (identifier)
    (array_litteral
      (type)
      (string (string_content))
      (string (string_content))
      (string (string_content))
      (string (string_content))
    )
  )
)

==================
Pointer variable
==================

x: *u32;

---

(source_file
  (var_declaration
    (identifier)
    (type
      (pointer_type
        (type)
      )
    )
  )
)

==================
Variable that stores an address
==================

add :: () { 
  hello := *variable;
}

---

(source_file
  (procedure_declaration
    (identifier)
    (procedure
      (parameters)
      (block
        (variable_declaration
          (identifier)
          (address (identifier))
        )
      )
    )
  )
)

==================
Variable that stores an enum
==================

add :: () { 
  hello: VkFormat = .R8G8B8A8_UNORM;
}

---

(source_file
  (procedure_declaration
    (identifier)
    (procedure
      (parameters)
      (block
        (var_declaration
          (identifier)
          (type (identifier))
          (member_expression (identifier))
        )
      )
    )
  )
)